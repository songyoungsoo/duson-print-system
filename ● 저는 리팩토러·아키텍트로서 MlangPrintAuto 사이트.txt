● 저는 리팩토러·아키텍트로서 MlangPrintAuto 사이트의 구조를 분석하고 UX 개선안을 제시하겠습니다.

● 공통 구조를 먼저 분석하겠습니다.

● Read(includes\header.php)
  ⎿  Read 220 lines (ctrl+r to expand)

● Read(includes\footer.php)
  ⎿  Read 343 lines (ctrl+r to expand)

● Search(pattern: "C:\xampp\htdocs\MlangPrintAuto\*\index.php")
  ⎿  Found 0 files 

● List(MlangPrintAuto)
  ⎿  Listed 404 paths (ctrl+r to expand)

● 품목별 메인 페이지를 몇 개 확인하겠습니다.

● Read(MlangPrintAuto\namecard\index.php)
  ⎿  Read 100 lines (ctrl+r to expand)

● Read(MlangPrintAuto\sticker_new\index.php)
  ⎿  Read 100 lines (ctrl+r to expand)

● 워크플로우 분석을 위해 주문 관련 파일을 확인하겠습니다.

● Search(pattern: "gallery", glob: "*.css")
  ⎿  Found 29 files (ctrl+r to expand)

● Read(css\unified-gallery.css)
  ⎿  Read 50 lines (ctrl+r to expand)

● Read(MlangPrintAuto\shop\cart.php)
  ⎿  Read 80 lines (ctrl+r to expand)

● CSS 중복 상태를 분석하겠습니다.

● List(MlangOrder_PrintAuto)
  ⎿  Listed 921 paths (ctrl+r to expand)

● Read(MlangOrder_PrintAuto\OnlineOrder_unified.php)
  ⎿  Read 50 lines (ctrl+r to expand)

● CSS 파일 중복 상태를 확인하겠습니다.

● List(css)
  ⎿  Listed 33 paths (ctrl+r to expand)

● Search(pattern: "font-family|타이포|typography", path: "css", glob: "*.css", output_mode: "count")
  ⎿  Found 40 matches across 18 files (ctrl+r to expand)

● 🏗️ MlangPrintAuto 구조 개선안 및 UX 워크플로우 최적화 제안서

  📊 A. 구조 제안서 (요약)

  현재 상태 분석 완료

  주요 발견사항:
  1. 공통 구조: /includes/ 폴더에 header.php, footer.php 파일로 부분 통합
  2. 갤러리 시스템: 통합 갤러리 CSS 존재하나 여러 버전이 산재
  3. 워크플로우: 장바구니 → 주문 → 완료 플로우 구현, 일부 파편화
  4. CSS 중복: 18개 CSS 파일에 font-family 중복 정의 (40회)
  5. 컴포넌트 패턴: 품목별 독립 구조로 재사용성 낮음

  개선 타깃 아키텍처

  ┌─────────────────────────────────────────────────────┐
  │                   공통 헤더 (통합)                    │
  ├─────────────────┬───────────────────────────────────┤
  │                 │                                   │
  │   갤러리 영역    │        계산/주문 영역               │
  │   (500px 고정)   │        (나머지 반응형)              │
  │                 │                                   │
  ├─────────────────┴───────────────────────────────────┤
  │                   공통 푸터 (통합)                    │
  └─────────────────────────────────────────────────────┘

  📁 B. 컴포넌트 설계서

  1. 공통 컴포넌트 목록

  | 컴포넌트명   | 역할       | 현재 위치                | 개선안                           |
  |---------|----------|----------------------|-------------------------------|
  | 헤더      | 상단 네비게이션 | /includes/header.php | 유지 (컴팩트화 필요)                  |
  | 푸터      | 하단 정보    | /includes/footer.php | 유지 (여백 최적화)                   |
  | 갤러리     | 이미지 展示   | 품목별 분산               | /components/gallery.php 통합    |
  | 파일업로드   | 드래그앤드롭   | 품목별 개별 구현            | /components/upload-cta.php    |
  | 가격계산    | 옵션별 계산   | 수식/테이블 혼재            | 인터페이스만 통합                     |       
  | 장바구니CTA | 주문 버튼    | 품목별 다른 UI            | /components/order-buttons.php |

  2. BEM 네이밍 표준안

  /* Block - Element - Modifier */
  .gallery {}                    /* Block */
  .gallery__thumbnail {}          /* Element */
  .gallery__thumbnail--active {}  /* Modifier */

  .calculator {}
  .calculator__option-row {}
  .calculator__price-display {}
  .calculator__price-display--highlighted {}

  .upload-zone {}
  .upload-zone__droparea {}
  .upload-zone__file-list {}

  3. 스페이싱 스케일 (8px 기준)

  :root {
    --spacing-xs: 4px;   /* 0.5x */
    --spacing-sm: 8px;   /* 1x */
    --spacing-md: 16px;  /* 2x */
    --spacing-lg: 24px;  /* 3x */
    --spacing-xl: 32px;  /* 4x */
    --spacing-xxl: 48px; /* 6x */
  }

  📋 C. 워크플로우 점검표

  현재 플로우 다이어그램

  graph LR
      A[제품선택] --> B[옵션선택]
      B --> C[가격계산]
      C --> D{주문방식}
      D -->|장바구니| E[shop_temp 저장]
      D -->|바로주문| F[주문폼]
      E --> G[cart.php]
      G --> F
      F --> H[ProcessOrder]
      H --> I[OrderComplete]

  발견된 이슈 및 개선점

  | 단계    | 현재 문제점      | 위험도 | 개선안              |
  |-------|-------------|-----|------------------|
  | 옵션선택  | 품목별 UI 불일치  | 중   | 공통 셀렉터 컴포넌트      |
  | 가격계산  | 수식/테이블 혼재   | 높음  | 인터페이스 통합 (로직 보존) |
  | 파일업로드 | 중복 구현       | 낮음  | 공통 업로드 컴포넌트      |
  | 장바구니  | 세션 의존성 높음   | 중   | 세션+쿠키 이중화        |
  | 주문완료  | JSON 데이터 노출 | 낮음  | 포맷팅 개선           |

  🖥️ D. 변경하지 말 것 목록

  ⚠️ 절대 수정 금지 항목

  | 파일/함수                   | 위치                                   | 이유         |
  |-------------------------|--------------------------------------|------------|
  | 가격계산 수식                 | /MlangPrintAuto/shop/view_modern.php | 핵심 비즈니스 로직 |
  | calculateProductPrice() | /includes/functions.php              | 테이블 기반 계산  |
  | shop_temp 테이블           | DB 스키마                               | 기존 데이터 호환성 |
  | 세션 처리                   | 각 품목 index.php                       | 장바구니 연동    |

  📈 E. 단계별 적용계획

  Step 1: 레이아웃 통합 (난이도: 낮음)

  - 목표: 공통 헤더/푸터 최적화
  - 작업:
    - 헤더 여백 1/3 축소 ✅ (완료)
    - 푸터 장식 제거 ✅ (완료)
    - 반응형 브레이크포인트 표준화
  - DoD: 모든 페이지 동일 레이아웃
  - 롤백: CSS 파일 이전 버전 복원

  Step 2: 컴포넌트 추출 (난이도: 중)

  - 목표: 재사용 컴포넌트 생성
  - 작업:
  // /components/gallery-card.php
  function render_gallery_card($product_type, $images) {
      // 통합 갤러리 카드 렌더링
  }

  // /components/upload-cta.php
  function render_upload_zone($session_id) {
      // 통합 업로드 영역
  }
  - DoD: 3개 이상 품목에서 재사용
  - 롤백: 기존 품목별 코드 유지

  Step 3: 워크플로우 UX 보강 (난이도: 중)

  - 목표: 끊김 없는 주문 플로우
  - 작업:
    - 필수 필드 검증 강화
    - 로딩/성공 토스트 메시지
    - 에러 핸들링 개선
  - DoD: 주문 성공률 95% 이상
  - 롤백: 검증 로직만 비활성화

  Step 4: 접근성/성능 (난이도: 낮음)

  - 목표: WCAG 2.1 AA 준수
  - 작업:
    - ARIA 라벨 추가
    - 키보드 네비게이션
    - 이미지 지연 로딩
  - DoD: Lighthouse 점수 90+
  - 롤백: 접근성 속성 제거

  💻 F. 샘플 코드/스니펫

  1. 공통 갤러리 컴포넌트

  // /components/gallery.php
  <?php
  function render_product_gallery($product_type, $db) {
      ?>
      <div class="gallery gallery--<?= $product_type ?>">
          <h3 class="gallery__title">📸 샘플 갤러리</h3>
          <div class="gallery__main">
              <img class="gallery__main-image" src="" alt="">
          </div>
          <div class="gallery__thumbnails">
              <?php
              // 기존 get_[product]_images.php 호출 유지
              $images = call_user_func("get_{$product_type}_images", $db);
              foreach($images as $img): ?>
                  <div class="gallery__thumbnail" data-full="<?= $img['full'] ?>">
                      <img src="<?= $img['thumb'] ?>" alt="">
                  </div>
              <?php endforeach; ?>
          </div>
      </div>
      <?php
  }
  ?>

  2. 통합 업로드 CTA

  // /assets/js/upload-flow.js
  class UnifiedUploader {
      constructor(options) {
          this.sessionId = options.sessionId;
          this.productType = options.productType;
          this.dropZone = document.querySelector('.upload-zone__droparea');
          this.init();
      }

      init() {
          // 기존 업로드 로직 재사용
          this.dropZone.addEventListener('drop', (e) => {
              e.preventDefault();
              this.handleFiles(e.dataTransfer.files);
          });
      }

      handleFiles(files) {
          // 기존 파일 처리 로직 유지
          // 계산 로직 호출은 그대로 둠
      }
  }

  3. 반응형 그리드 표준

  /* /assets/css/layout.css */
  .main-content {
      display: grid;
      grid-template-columns: 500px 1fr;
      gap: var(--spacing-lg);
  }

  @media (max-width: 1024px) {
      .main-content {
          grid-template-columns: 400px 1fr;
      }
  }

  @media (max-width: 768px) {
      .main-content {
          grid-template-columns: 1fr;
      }
  }

  4. 폼 검증 토스트

  // /assets/js/validation.js
  function showToast(message, type = 'info') {
      const toast = document.createElement('div');
      toast.className = `toast toast--${type}`;
      toast.innerHTML = `
          <div class="toast__icon">${type === 'error' ? '❌' : '✅'}</div>
          <div class="toast__message">${message}</div>
      `;
      document.body.appendChild(toast);

      setTimeout(() => toast.classList.add('toast--visible'), 100);
      setTimeout(() => toast.remove(), 3000);
  }

  // 사용 예시 (계산 로직은 건들지 않음)
  function validateOrder() {
      if (!document.querySelector('[name="file"]').value) {
          showToast('파일을 업로드해주세요', 'error');
          return false;
      }
      // 기존 계산/검증 로직 호출
      return true;
  }

  🔄 마이그레이션 체크리스트

  사전 준비

  - 전체 백업 생성
  - 개발 환경 복제
  - 기존 CSS/JS 버전 태깅

  Step 1 실행

  - header.php 여백 조정
  - footer.php 장식 제거
  - 브레이크포인트 변수화

  Step 2 실행

  - gallery.php 컴포넌트 생성
  - upload-cta.php 컴포넌트 생성
  - 1개 품목에서 테스트

  Step 3 실행

  - validation.js 추가
  - 토스트 메시지 구현
  - 에러 핸들링 강화

  Step 4 실행

  - ARIA 속성 추가
  - 포커스 관리 개선
  - Lighthouse 테스트

  검증

  - 모든 품목 주문 테스트
  - 장바구니 플로우 테스트
  - 모바일 반응형 테스트

  📌 핵심 원칙 준수

  1. [CRITICAL] 가격/수식 계산 로직 절대 변경 금지 ✅
  2. [SAFE] 파일 업로드/장바구니 기능 보존 ✅
  3. [COMPAT] 기존 URL 구조 유지 ✅
  4. [TRACE] 모든 변경사항 근거 명시 ✅
  5. [REVERT] 단계별 롤백 방법 제공 ✅

● 적용 난이도 평가:
  - Step 1 (레이아웃): 낮음 - CSS만 수정
  - Step 2 (컴포넌트): 중 - PHP 리팩토링 필요
  - Step 3 (워크플로우): 중 - JS 로직 추가
  - Step 4 (접근성): 낮음 - HTML 속성 추가

  예상 영향:
  - 로컬: 개별 페이지 수정 시
  - 전역: 공통 컴포넌트 변경 시
  - 특정 모듈: 품목별 계산 로직 인터페이스

  모든 제안은 가격/수식 계산 로직 보존을 최우선으로 하며, UI/UX 개선에만 집중합니다.
